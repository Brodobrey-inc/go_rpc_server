// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: api/proto/dirertory_informer.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectoryInformerClient is the client API for DirectoryInformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryInformerClient interface {
	Dir(ctx context.Context, in *DirectoryRequest, opts ...grpc.CallOption) (*DirectoryResponse, error)
}

type directoryInformerClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryInformerClient(cc grpc.ClientConnInterface) DirectoryInformerClient {
	return &directoryInformerClient{cc}
}

func (c *directoryInformerClient) Dir(ctx context.Context, in *DirectoryRequest, opts ...grpc.CallOption) (*DirectoryResponse, error) {
	out := new(DirectoryResponse)
	err := c.cc.Invoke(ctx, "/api.DirectoryInformer/Dir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryInformerServer is the server API for DirectoryInformer service.
// All implementations must embed UnimplementedDirectoryInformerServer
// for forward compatibility
type DirectoryInformerServer interface {
	Dir(context.Context, *DirectoryRequest) (*DirectoryResponse, error)
	mustEmbedUnimplementedDirectoryInformerServer()
}

// UnimplementedDirectoryInformerServer must be embedded to have forward compatible implementations.
type UnimplementedDirectoryInformerServer struct {
}

func (UnimplementedDirectoryInformerServer) Dir(context.Context, *DirectoryRequest) (*DirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dir not implemented")
}
func (UnimplementedDirectoryInformerServer) mustEmbedUnimplementedDirectoryInformerServer() {}

// UnsafeDirectoryInformerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryInformerServer will
// result in compilation errors.
type UnsafeDirectoryInformerServer interface {
	mustEmbedUnimplementedDirectoryInformerServer()
}

func RegisterDirectoryInformerServer(s grpc.ServiceRegistrar, srv DirectoryInformerServer) {
	s.RegisterService(&DirectoryInformer_ServiceDesc, srv)
}

func _DirectoryInformer_Dir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryInformerServer).Dir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DirectoryInformer/Dir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryInformerServer).Dir(ctx, req.(*DirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryInformer_ServiceDesc is the grpc.ServiceDesc for DirectoryInformer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryInformer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DirectoryInformer",
	HandlerType: (*DirectoryInformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dir",
			Handler:    _DirectoryInformer_Dir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/dirertory_informer.proto",
}
